let ytPlayer,
  progressUpdateInterval,
  skeletonTimer,
  ratingChart = null,
  currentPage = 1,
  currentLimit = localStorage.getItem("defaultPageSize") || "all";
const playerState = {
    isPlaying: !1,
    currentTrackId: null,
    playlist: [],
    shuffledPlaylist: [],
    volume: localStorage.getItem("playerVolume") || 100,
    isMuted: "true" === localStorage.getItem("playerMuted"),
    isEmbedded: !1,
    isShuffle: !1,
    isRepeat: !1,
    embeddedPlayers: {},
  },
  debounce = (e, t) => {
    let a;
    return (...r) => {
      (clearTimeout(a),
        (a = setTimeout(() => {
          e.apply(this, r);
        }, t)));
    };
  },
  getYouTubeVideoId = (e) =>
    e.match(
      /(?:youtube\.com\/(?:[^/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?/ ]{11})/,
    )?.[1] || null,
  formatTime = (e) =>
    `${Math.floor(e / 60)}:${Math.floor(e % 60)
      .toString()
      .padStart(2, "0")}`,
  showToast = (e, t = "success") => {
    const a = document.createElement("div"),
      r = "error" === t ? "bg-red-text" : "bg-green-text";
    ((a.className = `fixed bottom-24 right-5 z-[2000] rounded-md px-4 py-3 font-semibold shadow-lg ${r} text-white`),
      (a.textContent = e),
      document.body.appendChild(a),
      setTimeout(() => {
        ((a.style.transition = "opacity 0.5s ease"),
          (a.style.opacity = "0"),
          setTimeout(() => a.remove(), 500));
      }, 2500));
  },
  upgradeThumbnails = () => {
    document.querySelectorAll("img.track-thumbnail").forEach((e) => {
      if (window.innerWidth >= 768) {
        if (e.src.includes("i.ytimg.com")) {
          const t = e.src.replace(
            /(\/)(maxresdefault|hqdefault|mqdefault|default)(\.jpg)/,
            "$1mqdefault$3",
          );
          e.src !== t && (e.src = t);
        }
        return void e.classList.remove("object-cover", "aspect-video");
      }
      const t = e.src;
      if (t.includes("i.ytimg.com") && !e.dataset.processed) {
        e.dataset.processed = "true";
        const a = t.replace(
            /(\/)(mqdefault|hqdefault|default)(\.jpg)/,
            "$1maxresdefault$3",
          ),
          r = t.replace(
            /(\/)(mqdefault|hqdefault|default)(\.jpg)/,
            "$1hqdefault$3",
          );
        fetch(a, { method: "HEAD" })
          .then((t) => {
            if (!(t.ok && parseInt(t.headers.get("Content-Length"), 10) > 1024))
              throw new Error(
                "maxresdefault not available or is a placeholder",
              );
            e.src = a;
          })
          .catch(() => {
            e.src = r;
          })
          .finally(() => {
            e.classList.add("object-cover", "aspect-video");
          });
      }
    });
  },
  getIconSVG = (e, t = "h-full w-full") =>
    ({
      sun: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M210.2 53.9C217.6 50.8 226 51.7 232.7 56.1L320.5 114.3L408.3 56.1C415 51.7 423.4 50.9 430.8 53.9C438.2 56.9 443.4 63.5 445 71.3L465.9 174.5L569.1 195.4C576.9 197 583.5 202.4 586.5 209.7C589.5 217 588.7 225.5 584.3 232.2L526.1 320L584.3 407.8C588.7 414.5 589.5 422.9 586.5 430.3C583.5 437.7 576.9 443.1 569.1 444.6L465.8 465.4L445 568.7C443.4 576.5 438 583.1 430.7 586.1C423.4 589.1 414.9 588.3 408.2 583.9L320.4 525.7L232.6 583.9C225.9 588.3 217.5 589.1 210.1 586.1C202.7 583.1 197.3 576.5 195.8 568.7L175 465.4L71.7 444.5C63.9 442.9 57.3 437.5 54.3 430.2C51.3 422.9 52.1 414.4 56.5 407.7L114.7 320L56.5 232.2C52.1 225.5 51.3 217.1 54.3 209.7C57.3 202.3 63.9 196.9 71.7 195.4L175 174.6L195.9 71.3C197.5 63.5 202.9 56.9 210.2 53.9zM239.6 320C239.6 275.6 275.6 239.6 320 239.6C364.4 239.6 400.4 275.6 400.4 320C400.4 364.4 364.4 400.4 320 400.4C275.6 400.4 239.6 364.4 239.6 320zM448.4 320C448.4 249.1 390.9 191.6 320 191.6C249.1 191.6 191.6 249.1 191.6 320C191.6 390.9 249.1 448.4 320 448.4C390.9 448.4 448.4 390.9 448.4 320z"/></svg>`,
      moon: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M320 64C178.6 64 64 178.6 64 320C64 461.4 178.6 576 320 576C388.8 576 451.3 548.8 497.3 504.6C504.6 497.6 506.7 486.7 502.6 477.5C498.5 468.3 488.9 462.6 478.8 463.4C473.9 463.8 469 464 464 464C362.4 464 280 381.6 280 280C280 207.9 321.5 145.4 382.1 115.2C391.2 110.7 396.4 100.9 395.2 90.8C394 80.7 386.6 72.5 376.7 70.3C358.4 66.2 339.4 64 320 64z"/></svg>`,
      plus: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M352 128C352 110.3 337.7 96 320 96C302.3 96 288 110.3 288 128L288 288L128 288C110.3 288 96 302.3 96 320C96 337.7 110.3 352 128 352L288 352L288 512C288 529.7 302.3 544 320 544C337.7 544 352 529.7 352 512L352 352L512 352C529.7 352 544 337.7 544 320C544 302.3 529.7 288 512 288L352 288L352 128z"/></svg>`,
      minus: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M96 320C96 302.3 110.3 288 128 288L512 288C529.7 288 544 302.3 544 320C544 337.7 529.7 352 512 352L128 352C110.3 352 96 337.7 96 320z"/></svg>`,
      play: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M187.2 100.9C174.8 94.1 159.8 94.4 147.6 101.6C135.4 108.8 128 121.9 128 136L128 504C128 518.1 135.5 531.2 147.6 538.4C159.7 545.6 174.8 545.9 187.2 539.1L523.2 355.1C536 348.1 544 334.6 544 320C544 305.4 536 291.9 523.2 284.9L187.2 100.9z"/></svg>`,
      pause: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M176 96C149.5 96 128 117.5 128 144L128 496C128 522.5 149.5 544 176 544L240 544C266.5 544 288 522.5 288 496L288 144C288 117.5 266.5 96 240 96L176 96zM400 96C373.5 96 352 117.5 352 144L352 496C352 522.5 373.5 544 400 544L464 544C490.5 544 512 522.5 512 496L512 144C512 117.5 490.5 96 464 96L400 96z"/></svg>`,
      volume_xmark: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M80 416L128 416L262.1 535.2C268.5 540.9 276.7 544 285.2 544C304.4 544 320 528.4 320 509.2L320 130.8C320 111.6 304.4 96 285.2 96C276.7 96 268.5 99.1 262.1 104.8L128 224L80 224C53.5 224 32 245.5 32 272L32 368C32 394.5 53.5 416 80 416zM399 239C389.6 248.4 389.6 263.6 399 272.9L446 319.9L399 366.9C389.6 376.3 389.6 391.5 399 400.8C408.4 410.1 423.6 410.2 432.9 400.8L479.9 353.8L526.9 400.8C536.3 410.2 551.5 410.2 560.8 400.8C570.1 391.4 570.2 376.2 560.8 366.9L513.8 319.9L560.8 272.9C570.2 263.5 570.2 248.3 560.8 239C551.4 229.7 536.2 229.6 526.9 239L479.9 286L432.9 239C423.5 229.6 408.3 229.6 399 239z"/></svg>`,
      volume_high: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M533.6 96.5C523.3 88.1 508.2 89.7 499.8 100C491.4 110.3 493 125.4 503.3 133.8C557.5 177.8 592 244.8 592 320C592 395.2 557.5 462.2 503.3 506.3C493 514.7 491.5 529.8 499.8 540.1C508.1 550.4 523.3 551.9 533.6 543.6C598.5 490.7 640 410.2 640 320C640 229.8 598.5 149.2 533.6 96.5zM473.1 171C462.8 162.6 447.7 164.2 439.3 174.5C430.9 184.8 432.5 199.9 442.8 208.3C475.3 234.7 496 274.9 496 320C496 365.1 475.3 405.3 442.8 431.8C432.5 440.2 431 455.3 439.3 465.6C447.6 475.9 462.8 477.4 473.1 469.1C516.3 433.9 544 380.2 544 320.1C544 260 516.3 206.3 473.1 171.1zM412.6 245.5C402.3 237.1 387.2 238.7 378.8 249C370.4 259.3 372 274.4 382.3 282.8C393.1 291.6 400 305 400 320C400 335 393.1 348.4 382.3 357.3C372 365.7 370.5 380.8 378.8 391.1C387.1 401.4 402.3 402.9 412.6 394.6C434.1 376.9 448 350.1 448 320C448 289.9 434.1 263.1 412.6 245.5zM80 416L128 416L262.1 535.2C268.5 540.9 276.7 544 285.2 544C304.4 544 320 528.4 320 509.2L320 130.8C320 111.6 304.4 96 285.2 96C276.7 96 268.5 99.1 262.1 104.8L128 224L80 224C53.5 224 32 245.5 32 272L32 368C32 394.5 53.5 416 80 416z"/></svg>`,
      xmark: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M183.1 137.4C170.6 124.9 150.3 124.9 137.8 137.4C125.3 149.9 125.3 170.2 137.8 182.7L275.2 320L137.9 457.4C125.4 469.9 125.4 490.2 137.9 502.7C150.4 515.2 170.7 515.2 183.2 502.7L320.5 365.3L457.9 502.6C470.4 515.1 490.7 515.1 503.2 502.6C515.7 490.1 515.7 469.8 503.2 457.3L365.8 320L503.1 182.6C515.6 170.1 515.6 149.8 503.1 137.3C490.6 124.8 470.3 124.8 457.8 137.3L320.5 274.7L183.1 137.4z"/></svg>`,
    })[e] || "",
  loadPlaylistFromTemplate = () => {
    const e = document.getElementById("playlist-data");
    if (e)
      try {
        const t = JSON.parse(e.innerHTML);
        Array.isArray(t) &&
          ((playerState.playlist = t), console.log(playerState.playlist));
      } catch (e) {
        console.error("Failed to parse playlist data from <template> tag:", e);
      }
  };
function generateShuffledPlaylist() {
  playerState.shuffledPlaylist = [...playerState.playlist];
  for (let e = playerState.shuffledPlaylist.length - 1; e > 0; e--) {
    const t = Math.floor(Math.random() * (e + 1));
    [playerState.shuffledPlaylist[e], playerState.shuffledPlaylist[t]] = [
      playerState.shuffledPlaylist[t],
      playerState.shuffledPlaylist[e],
    ];
  }
}
const getActivePlayer = () =>
  playerState.isEmbedded &&
  playerState.embeddedPlayers[playerState.currentTrackId]
    ? playerState.embeddedPlayers[playerState.currentTrackId]
    : ytPlayer;
function togglePlayPause() {
  const e = playerState.currentTrackId;
  playerState.isEmbedded && playerState.embeddedPlayers[e]
    ? playerState.isPlaying
      ? playerState.embeddedPlayers[e].pauseVideo()
      : playerState.embeddedPlayers[e].playVideo()
    : ytPlayer &&
      (playerState.isPlaying ? ytPlayer.pauseVideo() : ytPlayer.playVideo());
}
function stopProgressUpdater() {
  clearInterval(progressUpdateInterval);
}
function cleanupPreviousEmbed(e) {
  if (!e) return;
  const t = document.querySelector(`tr[data-track-id="${e}"]`);
  if (!t) return;
  const a = t.querySelector("button[data-embed-button].is-open");
  if (a) {
    playerState.embeddedPlayers[e] &&
      (playerState.embeddedPlayers[e].destroy(),
      delete playerState.embeddedPlayers[e]);
    const r = t.querySelector("div[data-embed-container]");
    (r && ((r.innerHTML = ""), (r.style.display = "none")),
      a.classList.remove("is-open"));
  }
}
const showSkeleton = () => {
    const e = document.getElementById("tracks-table-body");
    e &&
      (clearTimeout(skeletonTimer),
      (skeletonTimer = setTimeout(() => {
        const t =
          '<tr class="skeleton-row"><td><div class="skeleton-bar"></div></td><td><div class="skeleton-bar"></div></td><td><div class="skeleton-bar"></div></td><td><div class="skeleton-bar"></div></td><td><div class="skeleton-bar"></div></td><td><div class="skeleton-bar"></div></td><td><div class="skeleton-bar"></div></td></tr>';
        e.innerHTML = t.repeat(10);
      }, 200)));
  },
  hideSkeleton = () => {
    clearTimeout(skeletonTimer);
  },
  updatePaginationUI = (e) => {
    const t = document.getElementById("page-links"),
      a = document.getElementById("prev-page-btn"),
      r = document.getElementById("next-page-btn"),
      n = document.getElementById("pagination-container"),
      o = document.getElementById("limit_filter");
    if (!(t && a && r && o && n)) return;
    if (((t.innerHTML = ""), e.total_pages <= 1))
      return void (n.style.display = "none");
    ((n.style.display = "flex"),
      (a.disabled = e.page <= 1),
      (r.disabled = e.page >= e.total_pages));
    const l = (e, t = e, a = !1, r = !1) => {
        if (r) {
          const e = document.createElement("span");
          return ((e.className = "p-2"), (e.textContent = "..."), e);
        }
        const n = document.createElement("button");
        return (
          (n.className =
            "shadow-md py-2 px-4 rounded border border-sky-text text-sky-text font-bold cursor-pointer ease-in-out  hover:transition-colors hover:duration-200 enabled:hover:bg-sky-hover"),
          (n.textContent = t),
          (n.dataset.page = e),
          a &&
            (n.classList.add(
              "bg-sky-text",
              "text-stone-950",
              "border-sky-text",
            ),
            (n.disabled = !0)),
          n
        );
      },
      s = e.page,
      d = e.total_pages,
      i = [];
    if (d <= 10) for (let e = 1; e <= d; e++) i.push(e);
    else {
      const e = 2;
      for (let t = 1; t <= d; t++)
        (1 === t || t === d || (t >= s - e && t <= s + e)) &&
          (i.length > 0 && t > i[i.length - 1] + 1 && i.push("..."), i.push(t));
    }
    (i.forEach((e) => {
      "..." === e
        ? t.appendChild(l(null, null, !1, !0))
        : t.appendChild(l(e, e, e === s));
    }),
      (o.value = e.limit));
  },
  updateSortIndicators = () => {
    const e = new URLSearchParams(window.location.search);
    let t = e.get("sort_by"),
      a = e.get("sort_dir");
    (t ||
      (window.location.pathname.includes("rated_tracks")
        ? ((t = "rating"), (a = "desc"))
        : ((t = "rank"), (a = "asc"))),
      document.querySelectorAll("th a[data-sort]").forEach((e) => {
        (e.classList.remove("active", "font-bold", "text-sky-text"),
          (e.textContent = e.textContent.replace(/ [▲▼]/, "")),
          e.dataset.sort === t &&
            (e.classList.add("active", "font-bold", "text-sky-text"),
            (e.textContent += "desc" === a ? " ▼" : " ▲")));
      }));
  },
  updateThemeUI = () => {
    const e = document.getElementById("theme-icon");
    if (!e) return;
    const t = document.documentElement.dataset.theme;
    e.innerHTML = getIconSVG("dark" === t ? "sun" : "moon");
  },
  updateActiveFilterDisplay = () => {
    const e = document.getElementById("rating-filter-indicator-container");
    if (!e) return;
    const t = new URLSearchParams(window.location.search).get(
      "exact_rating_filter",
    );
    t
      ? ((e.innerHTML = `\n\t\t\t<div data-active-rating-filter class="flex items-center justify-between gap-3 bg-gray-100 border border-border rounded px-3 py-2 shadow-sm w-1/6">\n\t\t\t\t<span>Filtering by rating: <strong>${t} ★</strong></span>\n\t\t\t\t<button type="button" data-clear-rating-filter\n\t\t\t\t\tclass="text-xl text-gray-500 hover:text-gray-700 leading-none"\n\t\t\t\t\ttitle="Clear rating filter">&times;</button>\n\t\t\t</div>\n\t\t`),
        (e.style.display = "block"))
      : ((e.innerHTML = ""), (e.style.display = "none"));
  },
  toggleClearButton = (e) => {
    const t = e.closest(".relative");
    if (!t) return;
    const a = t.querySelector("[data-clear]");
    if (!a) return;
    const r = e.value.length > 0;
    (a.classList.toggle("opacity-100", r),
      a.classList.toggle("opacity-0", !r),
      a.classList.toggle("visible", r),
      a.classList.toggle("invisible", !r));
  },
  closePlaylistModals = () => {
    document.querySelectorAll(".playlist-modal").forEach((e) => e.remove());
  },
  openPlaylistModal = async (e, t) => {
    closePlaylistModals();
    try {
      const a = await fetch(`/api/tracks/${e}/playlist-status`);
      if (!a.ok) throw new Error("Failed to fetch playlist status.");
      const { member_of: r, not_member_of: n } = await a.json(),
        o = document.createElement("div");
      ((o.className =
        "playlist-modal fixed z-20 mt-2 w-72 rounded-md border border-border bg-card-bg p-2 shadow-lg"),
        (o.dataset.trackId = e));
      let l = "";
      r.length > 0 &&
        (l = `\n                <div class="px-2 pt-2 text-sm font-bold text-header">In Playlists</div>\n                <div class="space-y-1 p-1">\n                    ${r.map((e) => `\n                        <div class="flex items-center justify-between rounded hover:bg-gray-hover">\n                            <a href="/playlist/${e.id}" class="grow p-2 text-left text-foreground">${e.name}</a>\n                            <button data-remove-from-playlist="${e.id}" class="p-2 text-red-text hover:text-red-500">\n                                <span class="inline-block h-4 w-4">${getIconSVG("minus")}</span>\n                            </button>\n                        </div>\n                    `).join("")}\n                </div>\n            `);
      let s = "";
      (n.length > 0 &&
        (s = `\n                <div class="px-2 pt-2 text-sm font-bold text-header">Add to...</div>\n                <div class="space-y-1 p-1">\n                     ${n.map((e) => `\n                        <div class="flex items-center justify-between rounded hover:bg-gray-hover">\n                             <span class="grow p-2 text-left text-foreground">${e.name}</span>\n                             <button data-add-to-existing-playlist="${e.id}" class="p-2 text-green-text hover:text-green-500">\n                                <span class="inline-block h-4 w-4 text-green-text">${getIconSVG("plus")}</span>\n                            </button>\n                        </div>\n                    `).join("")}\n                </div>\n            `),
        (o.innerHTML = `\n            <div class="max-h-80 overflow-y-auto">\n                ${l}\n                ${s}\n            </div>\n            <div class="mt-2 border-t border-border pt-2">\n                <input type="text" data-new-playlist-name placeholder="Or create new..." class="w-full rounded border border-border bg-background p-2 text-foreground placeholder:text-gray-text">\n                <button data-create-playlist class="mt-2 w-full cursor-pointer rounded border border-cyan-text px-2 py-1 text-cyan-text ease-in-out  hover:transition-colors hover:duration-200 hover:bg-cyan-hover disabled:opacity-50" disabled>Create & Add</button>\n            </div>\n        `),
        document.body.appendChild(o));
      const d = t.getBoundingClientRect();
      let i = window.scrollY + d.bottom,
        c = window.scrollX + d.left;
      (c + 288 > window.innerWidth && (c = window.innerWidth - 298),
        (o.style.top = `${i}px`),
        (o.style.left = `${c}px`));
    } catch (e) {
      showToast(e.message, "error");
    }
  };
document.addEventListener("DOMContentLoaded", () => {
  const e = document.getElementById("music-player"),
    t = document.getElementById("player-play-pause-btn"),
    a = document.getElementById("player-next-btn"),
    r = document.getElementById("player-prev-btn"),
    n = document.getElementById("player-stop-btn"),
    o = document.getElementById("player-volume-slider"),
    l = document.getElementById("player-mute-btn"),
    s = document.getElementById("player-progress-bar"),
    d = document.getElementById("player-current-time"),
    i = document.getElementById("player-duration"),
    c = document.getElementById("limit_filter"),
    u = document.getElementById("pagination-container"),
    y = document.getElementById("filter-form"),
    p = document.getElementById("scrape-button");
  function m(t) {
    const a = playerState.playlist.findIndex((e) => e.id === t);
    if (-1 === a) return;
    ((playerState.isEmbedded = !1), (playerState.currentTrackId = t));
    const r = playerState.playlist[a],
      n = getYouTubeVideoId(r.link);
    n
      ? ((s.value = 0),
        (d.textContent = "0:00"),
        (i.textContent = "0:00"),
        e.classList.replace("hidden", "grid"),
        b(),
        ytPlayer
          ? ytPlayer.loadVideoById(n)
          : (ytPlayer = new YT.Player("youtube-player-container", {
              height: "180",
              width: "320",
              videoId: n,
              playerVars: { playsinline: 1, autoplay: 1 },
              events: {
                onReady: (e) => {
                  (e.target.setVolume(playerState.volume),
                    playerState.isMuted ? e.target.mute() : e.target.unMute());
                },
                onStateChange: C,
                onError: v,
              },
            })))
      : showToast("Could not find a valid YouTube video ID.", "error");
  }
  function g() {
    const e = playerState.isShuffle
        ? playerState.shuffledPlaylist
        : playerState.playlist,
      t = playerState.isEmbedded,
      a = playerState.currentTrackId,
      r = e.findIndex((e) => e.id === playerState.currentTrackId);
    if (-1 === r) return;
    const n = e[(r + 1) % e.length];
    if (
      (t && cleanupPreviousEmbed(a),
      (playerState.currentTrackId = n.id),
      (playerState.isEmbedded = !1),
      (s.value = 0),
      (d.textContent = "0:00"),
      (i.textContent = "0:00"),
      (document.getElementById("player-thumbnail").src = n.imageUrl),
      (document.getElementById("player-title").textContent = n.title),
      (document.getElementById("player-producer").textContent = n.producer),
      b(),
      t)
    )
      setTimeout(() => {
        const e = document.querySelector(`tr[data-track-id="${n.id}"]`);
        if (e) {
          const t = e.querySelector("button[data-embed-button]");
          t && !t.classList.contains("is-open") && t.click();
        }
      }, 300);
    else {
      const e = getYouTubeVideoId(n.link);
      ytPlayer && e
        ? ytPlayer.loadVideoById(e)
        : e &&
          (ytPlayer = new YT.Player("youtube-player-container", {
            height: "180",
            width: "320",
            videoId: e,
            playerVars: { playsinline: 1, autoplay: 1 },
            events: {
              onReady: (e) => {
                (e.target.setVolume(playerState.volume),
                  playerState.isMuted ? e.target.mute() : e.target.unMute());
              },
              onStateChange: C,
              onError: v,
            },
          }));
    }
  }
  function h() {
    ytPlayer && ytPlayer.stopVideo();
    for (const e in playerState.embeddedPlayers)
      playerState.embeddedPlayers[e] &&
        (playerState.embeddedPlayers[e].destroy(),
        delete playerState.embeddedPlayers[e]);
    (document
      .querySelectorAll("button[data-embed-button].is-open")
      .forEach((e) => {
        e.classList.remove("is-open");
        const t = e.closest("td").querySelector("div[data-embed-container]");
        t && ((t.innerHTML = ""), (t.style.display = "none"));
      }),
      (playerState.isPlaying = !1),
      (playerState.currentTrackId = null),
      (playerState.isEmbedded = !1),
      stopProgressUpdater(),
      e.classList.replace("grid", "hidden"),
      (s.value = 0),
      (d.textContent = "0:00"),
      (i.textContent = "0:00"),
      b());
  }
  const f = async () => {
    const e = document.getElementById("tracks-table-body"),
      t = document.getElementById("filter-form"),
      a = e.dataset.updateUrl;
    if (!a) return;
    const r = playerState.currentTrackId;
    if (t) {
      const n = new URLSearchParams(window.location.search);
      (new FormData(t).forEach((e, t) => {
        e ? n.set(t, e) : n.delete(t);
      }),
        n.set("page", currentPage),
        n.has("limit") || n.set("limit", currentLimit));
      const o = new URLSearchParams(n.toString());
      ("ranked" === o.get("rank_filter") && o.delete("rank_filter"),
        "all" === o.get("rated_filter") && o.delete("rated_filter"));
      const l = localStorage.getItem("defaultPageSize") || "all";
      (o.get("limit") === l && o.delete("limit"),
        "1" === o.get("page") && o.delete("page"));
      const s = `${a}?${n.toString()}`,
        d = o.toString(),
        i = d ? `${window.location.pathname}?${d}` : window.location.pathname;
      try {
        const t = await fetch(s);
        hideSkeleton();
        const a = await t.json();
        if (
          ((e.innerHTML = a.table_body_html), loadPlaylistFromTemplate(), r)
        ) {
          playerState.playlist.some((e) => e.id === r) ? b() : h();
        }
        (updatePaginationUI(a.pagination), upgradeThumbnails());
      } catch (t) {
        (hideSkeleton(),
          console.error("Failed to update tracks:", t),
          (e.innerHTML =
            '<tr><td colspan="7">Error loading tracks. Please try again.</td></tr>'));
      }
      (window.history.pushState({}, "", i),
        updateSortIndicators(),
        updateActiveFilterDisplay());
    }
  };
  function b() {
    if (
      ((t.innerHTML = playerState.isPlaying
        ? getIconSVG("pause", "h-8 w-8")
        : getIconSVG("play", "h-8 w-8")),
      document.querySelectorAll("tr.is-playing").forEach((e) => {
        e.classList.remove("is-playing");
      }),
      document
        .querySelectorAll("button[data-play-button].is-playing")
        .forEach((e) => {
          ((e.innerHTML = getIconSVG("play", "h-4 w-4")),
            e.classList.remove("is-playing"));
        }),
      null !== playerState.currentTrackId)
    ) {
      const e = playerState.playlist.find(
        (e) => e.id === playerState.currentTrackId,
      );
      if (e) {
        ((document.getElementById("player-thumbnail").src = e.imageUrl),
          (document.getElementById("player-title").textContent = e.title),
          (document.getElementById("player-producer").textContent =
            e.producer));
        const t = document.querySelector(`tr[data-track-id="${e.id}"]`);
        if (t) {
          t.classList.add("is-playing");
          const e = t.querySelector("button[data-play-button]");
          e &&
            ((e.innerHTML = playerState.isPlaying
              ? getIconSVG("pause", "h-4 w-4")
              : getIconSVG("play", "h-4 w-4")),
            e.classList.add("is-playing"));
        }
      }
    }
    ((o.value = playerState.isMuted ? 0 : playerState.volume),
      (l.innerHTML = playerState.isMuted
        ? getIconSVG("volume_xmark", "h-8 w-8")
        : getIconSVG("volume_high", "h-8 w-8")));
  }
  function v(e) {
    (console.error("YouTube Player Error:", e.data),
      showToast(
        `Could not play this video.\n\nThis might be because the uploader has disabled embedding, or the video is private/deleted.\n(Error code: ${e.data})`,
        "error",
      ),
      g());
  }
  const S = debounce(f, 300);
  function w() {
    (stopProgressUpdater(),
      (progressUpdateInterval = setInterval(() => {
        let e;
        if (
          ((e =
            playerState.isEmbedded &&
            playerState.embeddedPlayers[playerState.currentTrackId]
              ? playerState.embeddedPlayers[playerState.currentTrackId]
              : ytPlayer),
          e && playerState.isPlaying)
        ) {
          const t = e.getCurrentTime(),
            a = e.getDuration();
          a > 0 &&
            ((s.value = (t / a) * 100),
            (d.textContent = formatTime(t)),
            (i.textContent = formatTime(a)));
        }
      }, 250)));
  }
  function C(e) {
    if (e.data === YT.PlayerState.PLAYING)
      ((playerState.isPlaying = !0), w(), b());
    else if (e.data === YT.PlayerState.PAUSED)
      ((playerState.isPlaying = !1), stopProgressUpdater(), b());
    else if (e.data === YT.PlayerState.ENDED)
      if (playerState.isRepeat) {
        const e =
          playerState.embeddedPlayers[playerState.currentTrackId] || ytPlayer;
        e && (e.seekTo(0, !0), e.playVideo());
      } else g();
  }
  const k = (e, t) => {
      const a = e.getBoundingClientRect(),
        r = t.clientX - a.left,
        n = Math.round((r / a.width) * 10),
        o = Math.max(1, Math.min(10, n)),
        l = (o / 10) * 100;
      return (e.style.setProperty("--rating-width", `${l}%`), o);
    },
    x = () => {
      const e = document.getElementById("ratingDistributionChart");
      if (e) {
        ratingChart && ratingChart.destroy();
        try {
          const t = JSON.parse(e.dataset.ratings),
            a = Object.keys(t).sort((e, t) => parseFloat(e) - parseFloat(t)),
            r = a.map((e) => t[e]),
            n = "dark" === document.documentElement.dataset.theme,
            o = n ? "rgba(255, 255, 255, 0.1)" : "rgba(0, 0, 0, 0.1)",
            l = n ? "#e0e0e0" : "#666",
            s = (e, t) => {
              if (t.length > 0) {
                const e = t[0].index,
                  r = a[e],
                  n = new URLSearchParams();
                (n.set("sort_by", "rating"),
                  n.set("sort_dir", "desc"),
                  n.set("exact_rating_filter", r),
                  window.history.pushState(
                    {},
                    "",
                    `${window.location.pathname}?${n.toString()}`,
                  ),
                  showSkeleton(),
                  f());
              }
            };
          ratingChart = new Chart(e, {
            type: "bar",
            data: {
              labels: a.map((e) => `${e} ★`),
              datasets: [
                {
                  label: "# of Ratings",
                  data: r,
                  backgroundColor: n
                    ? "rgba(144, 186, 255, 0.6)"
                    : "rgba(0, 123, 255, 0.6)",
                  borderColor: n
                    ? "rgba(144, 186, 255, 1)"
                    : "rgba(0, 123, 255, 1)",
                  borderWidth: 1,
                },
              ],
            },
            options: {
              onClick: s,
              onHover: (e, t) => {
                e.native.target.style.cursor = t[0] ? "pointer" : "default";
              },
              scales: {
                y: {
                  beginAtZero: !0,
                  ticks: { stepSize: 1, color: l },
                  grid: { color: o },
                },
                x: { ticks: { color: l }, grid: { display: !1 } },
              },
              plugins: { legend: { display: !1 } },
            },
          });
        } catch (e) {
          console.error("Could not parse or render chart data:", e);
        }
      }
    };
  if (
    (updateSortIndicators(),
    updateThemeUI(),
    updateActiveFilterDisplay(),
    upgradeThumbnails(),
    x(),
    loadPlaylistFromTemplate(),
    document.body.addEventListener("click", (t) => {
      const a = t.target.closest("[data-clear-rating]");
      if (a) {
        t.preventDefault();
        const e = a.closest("form[data-rating-form]"),
          r = a.dataset.deleteEndpoint;
        if (!e || !r) return;
        return window.location.pathname.includes("rated_tracks")
          ? void fetch(r, { method: "POST" }).then(() => {
              e.closest("tr")?.remove();
            })
          : void fetch(r, { method: "POST" }).then(() => {
              const t = e.querySelector("[data-star-rating]");
              (t &&
                ((t.dataset.rating = "0"),
                t.style.setProperty("--rating-width", "0%")),
                e
                  .querySelectorAll('input[type="radio"]')
                  .forEach((e) => (e.checked = !1)));
              const r = e.querySelector("textarea[data-notes-input]"),
                n = e.querySelector("button[data-notes-toggle]");
              (r && (r.value = ""),
                n &&
                  (n.classList.add("text-foreground", "text-foreground"),
                  (n.textContent = "Add Note")),
                a.remove());
            });
      }
      const r = t.target.closest("button[data-play-button]");
      if (r) {
        t.preventDefault();
        const e = r.dataset.trackId;
        return 0 === playerState.playlist.length &&
          (loadPlaylistFromTemplate(), 0 === playerState.playlist.length)
          ? void showToast(
              "Could not find playlist data to play track.",
              "error",
            )
          : e === playerState.currentTrackId
            ? void togglePlayPause()
            : void m(e);
      }
      const n = t.target.closest("[data-clear]");
      if (n) {
        const e = n.parentElement.querySelector("input");
        e &&
          ((e.value = ""),
          e.focus(),
          e.dispatchEvent(new Event("input", { bubbles: !0 })));
      }
      if (t.target.closest("#clear-filters-btn")) {
        t.preventDefault();
        const e = document.getElementById("filter-form");
        if (e) {
          e.querySelectorAll(
            'input[type="text"], input[type="search"]',
          ).forEach((e) => {
            ((e.value = ""), toggleClearButton(e));
          });
          const t = e.querySelector("#rank_ranked");
          t && (t.checked = !0);
          const a = e.querySelector("#rated_filter");
          a && (a.value = "all");
        }
        const a = window.location.pathname;
        return (
          window.history.pushState({}, "", a),
          (currentPage = 1),
          showSkeleton(),
          void f()
        );
      }
      const o = t.target.closest("div[data-star-rating]");
      if (o) {
        const e = k(o, t),
          a = o.closest("form"),
          r = a.querySelector(`input[value="${e}"]`);
        if (r) {
          r.checked = !0;
          const n = new FormData(a);
          (n.set("rating", e),
            fetch(a.action, { method: "POST", body: n }).then(() => {
              if (
                ((o.dataset.rating = e),
                k(o, t),
                !a.querySelector("[data-clear-rating]"))
              ) {
                const e = `\n\t\t\t\t\t\t\t\t<button data-clear-rating type="button" data-delete-endpoint="${a.action}/delete"\n\t\t\t\t\t\t\t\t\tclass="shadow-md p-1 rounded border border-red-text text-red-text font-bold cursor-pointer ease-in-out  hover:transition-colors hover:duration-200 hover:bg-red-hover">\n\t\t\t\t\t\t\t\t\t<span class="inline-block h-6 w-6">${getIconSVG("xmark")}</span>\n\t\t\t\t\t\t\t\t</button>`,
                  t = a.querySelector(
                    "button[data-notes-toggle]",
                  )?.parentElement;
                t && t.insertAdjacentHTML("beforeend", e);
              }
            }));
        }
        return;
      }
      const l = t.target.closest("button[data-notes-toggle]");
      if (l) {
        t.preventDefault();
        const e = l.closest("tr[data-track-id]");
        if (!e) return;
        const a = e.querySelector("div[data-notes-container]");
        if (!a) return;
        if ((a.classList.toggle("hidden"), !a.classList.contains("hidden"))) {
          const e = a.querySelector("textarea[data-notes-input]");
          e && e.focus();
        }
        return;
      }
      const s = t.target.closest("th a[data-sort]");
      if (s) {
        t.preventDefault();
        const e = new URLSearchParams(window.location.search),
          a = s.dataset.sort,
          r = e.get("sort_by"),
          n = e.get("sort_dir");
        let o = ["published_date", "rating", "rank"].includes(a)
          ? "desc"
          : "asc";
        return (
          a === r && (o = "asc" === n ? "desc" : "asc"),
          e.set("sort_by", a),
          e.set("sort_dir", o),
          (currentPage = 1),
          window.history.pushState(
            {},
            "",
            `${window.location.pathname}?${e.toString()}`,
          ),
          showSkeleton(),
          void f()
        );
      }
      const d = t.target.closest("a.filter-link");
      if (d) {
        t.preventDefault();
        const e = d.dataset.filterType,
          a = d.dataset.filterValue,
          r = document.getElementById(e);
        return void (
          r &&
          ((r.value = a), r.dispatchEvent(new Event("input", { bubbles: !0 })))
        );
      }
      if (t.target.closest("[data-clear-rating-filter]")) {
        t.preventDefault();
        const e = new URLSearchParams(window.location.search);
        (e.delete("exact_rating_filter"),
          e.delete("sort_by"),
          e.delete("sort_dir"),
          window.history.pushState(
            {},
            "",
            `${window.location.pathname}?${e.toString()}`,
          ),
          showSkeleton(),
          f());
      }
      const i = t.target.closest("button[data-vocadb-track-button]");
      if (i) {
        t.preventDefault();
        const e = encodeURIComponent(i.dataset.titleEn),
          a = i.dataset.titleJp ? encodeURIComponent(i.dataset.titleJp) : "",
          r = encodeURIComponent(i.dataset.producer);
        return (
          (i.disabled = !0),
          (i.textContent = "..."),
          void fetch(
            `/api/vocadb_search?title_en=${e}&producer=${r}&title_jp=${a}`,
          )
            .then((e) => (e.ok ? e.json() : Promise.reject("Search failed")))
            .then((e) => {
              e.url
                ? window.open(e.url, "_blank")
                : showToast("Track not found on VocaDB.", "error");
            })
            .catch(() => showToast("Could not search VocaDB.", "error"))
            .finally(() => {
              ((i.disabled = !1), (i.textContent = "VocaDB"));
            })
        );
      }
      const c = t.target.closest("button[data-vocadb-artist-button]");
      if (c) {
        t.preventDefault();
        const e = c.dataset.producer;
        return (
          (c.disabled = !0),
          (c.textContent = "..."),
          void fetch(
            `/api/vocadb_artist_search?producer=${encodeURIComponent(e)}`,
          )
            .then((e) => (e.ok ? e.json() : Promise.reject("Search failed")))
            .then((e) => {
              e.url
                ? window.open(e.url, "_blank")
                : showToast("Producer not found on VocaDB.", "error");
            })
            .catch(() =>
              showToast("Could not search VocaDB for this producer.", "error"),
            )
            .finally(() => {
              ((c.disabled = !1), (c.textContent = "VocaDB"));
            })
        );
      }
      const u = t.target.closest("button[data-embed-button]");
      if (u) {
        t.preventDefault();
        const a = u.closest("tr"),
          r = a.dataset.trackId,
          n = u.closest("td").querySelector("div[data-embed-container]");
        document
          .querySelectorAll("button[data-embed-button].is-open")
          .forEach((e) => {
            const t = e.closest("tr").dataset.trackId;
            e !== u && t !== playerState.currentTrackId && e.click();
          });
        const o = a.closest("tbody");
        if (!o.dataset.playlistBuilt) {
          const e = Array.from(o.querySelectorAll("tr"));
          ((playerState.playlist = e
            .map((e) => {
              const t = e.querySelector('td[data-label="Title"] a'),
                a = e.querySelector('td[data-label="Producer"] a'),
                r = e.querySelector("button[data-play-button]");
              return {
                id: r ? r.dataset.trackId : null,
                title: t ? t.textContent.trim() : "Unknown",
                producer: a ? a.textContent.trim() : "Unknown",
                link: t ? t.href : "",
                imageUrl: e.querySelector("td:nth-child(1) img").src,
              };
            })
            .filter((e) => e.id)),
            (o.dataset.playlistBuilt = "true"));
        }
        if (
          (e.classList.replace("hidden", "grid"),
          playerState.currentTrackId !== r)
        ) {
          playerState.currentTrackId = r;
          const e = playerState.playlist.find((e) => e.id === r);
          e &&
            ((document.getElementById("player-thumbnail").src = e.imageUrl),
            (document.getElementById("player-title").textContent = e.title),
            (document.getElementById("player-producer").textContent =
              e.producer));
        }
        if (u.classList.toggle("is-open")) {
          const e = getYouTubeVideoId(u.dataset.youtubeUrl);
          if (!e) return void window.open(u.dataset.youtubeUrl, "_blank");
          const t = `embedded-player-${r}`;
          ((n.innerHTML = `<div id="${t}" style="width: 100%; aspect-ratio: 16/9;"></div>`),
            (n.style.display = "block"),
            (playerState.embeddedPlayers[r] = new YT.Player(t, {
              height: "100%",
              width: "100%",
              videoId: e,
              playerVars: { playsinline: 1, autoplay: 1 },
              events: {
                onReady: (t) => {
                  const a = ytPlayer
                    ? getYouTubeVideoId(ytPlayer.getVideoUrl())
                    : null;
                  if (e === a) {
                    const e = ytPlayer.getCurrentTime();
                    (ytPlayer.pauseVideo(),
                      t.target.seekTo(e, !0),
                      playerState.isPlaying && t.target.playVideo());
                  }
                  playerState.isEmbedded = !0;
                },
                onStateChange: C,
                onError: v,
              },
            })));
        } else {
          const e = playerState.isPlaying && r === playerState.currentTrackId;
          let t = 0;
          if (playerState.embeddedPlayers[r]) {
            try {
              t = playerState.embeddedPlayers[r].getCurrentTime() || 0;
            } catch {
              t = 0;
            }
            (playerState.embeddedPlayers[r].destroy(),
              delete playerState.embeddedPlayers[r]);
          }
          if (
            ((n.innerHTML = ""),
            (n.style.display = "none"),
            r === playerState.currentTrackId)
          )
            if (((playerState.isEmbedded = !1), ytPlayer))
              (ytPlayer.seekTo(t, !0),
                e ? ytPlayer.playVideo() : ytPlayer.pauseVideo());
            else {
              const a = playerState.playlist.find((e) => e.id === r);
              if (a) {
                const r = getYouTubeVideoId(a.link);
                ytPlayer = new YT.Player("youtube-player-container", {
                  height: "180",
                  width: "320",
                  videoId: r,
                  playerVars: { playsinline: 1, autoplay: e ? 1 : 0 },
                  events: {
                    onReady: (e) => {
                      (e.target.setVolume(playerState.volume),
                        playerState.isMuted
                          ? e.target.mute()
                          : e.target.unMute(),
                        t > 0 && e.target.seekTo(t, !0));
                    },
                    onStateChange: C,
                    onError: v,
                  },
                });
              }
            }
        }
        return;
      }
      const y = t.target.closest("button[data-lyrics-button]");
      if (y) {
        t.preventDefault();
        const e = y.closest("td").querySelector("div[data-lyrics-container]"),
          a = e.querySelector("select[data-lyrics-select]"),
          r = e.querySelector("div[data-lyrics-metadata]"),
          n = e.querySelector("div[data-lyrics-content]");
        if (y.classList.toggle("is-open"))
          if (((y.textContent = "Close"), "true" === e.dataset.loaded))
            e.style.display = "block";
          else {
            ((y.disabled = !0), (y.textContent = "..."));
            const t = encodeURIComponent(y.dataset.titleEn),
              o = y.dataset.titleJp
                ? encodeURIComponent(y.dataset.titleJp)
                : "",
              l = encodeURIComponent(y.dataset.producer);
            let s = [];
            const d = (e) => {
              const t = s[e];
              if (!t) return;
              let a = `Type: <strong>${t.translation_type}</strong>`;
              (t.source &&
                ((a += " | Source: "),
                t.url
                  ? (a += `<a class="hover:underline hover:text-sky-text font-semibold" href="${t.url}" target="_blank">${t.source}</a>`)
                  : (a += t.source)),
                (r.innerHTML = a),
                (n.innerHTML = t.text));
            };
            fetch(
              `/api/vocadb_search?title_en=${t}&producer=${l}&title_jp=${o}`,
            )
              .then((e) => (e.ok ? e.json() : Promise.reject("Song not found")))
              .then((e) =>
                e.song_id
                  ? fetch(`/api/vocadb_lyrics/${e.song_id}`)
                  : Promise.reject("Song not found"),
              )
              .then((e) =>
                e.ok ? e.json() : Promise.reject("Lyrics not available"),
              )
              .then((t) => {
                if (((s = t.lyrics), 0 === s.length))
                  return Promise.reject("No lyrics found");
                ((a.innerHTML = ""),
                  s.forEach((e, t) => {
                    const r = document.createElement("option");
                    ((r.value = t),
                      (r.textContent = e.label),
                      a.appendChild(r));
                  }),
                  d(0),
                  (e.style.display = "block"),
                  (e.dataset.loaded = "true"),
                  a.dataset.listener ||
                    (a.addEventListener("change", (e) => d(e.target.value)),
                    (a.dataset.listener = "true")));
              })
              .catch((t) => {
                ((r.innerHTML = ""),
                  (n.innerHTML = `<em>${t}</em>`),
                  (e.style.display = "block"),
                  (e.dataset.loaded = "false"),
                  setTimeout(() => {
                    y.classList.contains("is-open") ||
                      (e.style.display = "none");
                  }, 4e3));
              })
              .finally(() => {
                ((y.disabled = !1),
                  y.classList.contains("is-open")
                    ? (y.textContent = "Close")
                    : (y.textContent = "Lyrics"));
              });
          }
        else ((e.style.display = "none"), (y.textContent = "Lyrics"));
        return;
      }
      const p = t.target.closest("[data-add-to-playlist-button]"),
        g = t.target.closest(".playlist-modal");
      if (p) {
        t.preventDefault();
        const e = p.dataset.trackId;
        return void openPlaylistModal(e, p);
      }
      if (g) {
        const e = g.dataset.trackId,
          a = t.target.closest("[data-add-to-existing-playlist]");
        if (a) {
          const t = a.dataset.addToExistingPlaylist;
          fetch(`/api/playlists/${t}/tracks/${e}`, { method: "POST" })
            .then((e) => {
              if (!e.ok) throw new Error("Failed to add track.");
              (showToast("Track added!"),
                closePlaylistModals(),
                showSkeleton(),
                f());
            })
            .catch((e) => showToast(e.message, "error"));
        }
        const r = t.target.closest("[data-remove-from-playlist]");
        if (r) {
          const t = r.dataset.removeFromPlaylist;
          fetch(`/api/playlists/${t}/tracks/${e}`, { method: "DELETE" })
            .then((e) => {
              if (!e.ok) throw new Error("Failed to remove track.");
              (showToast("Track removed."),
                closePlaylistModals(),
                showSkeleton(),
                f());
            })
            .catch((e) => showToast(e.message, "error"));
        }
        const n = t.target.closest("[data-create-playlist]");
        if (n && !n.disabled) {
          const t = g.querySelector("[data-new-playlist-name]").value.trim();
          t &&
            fetch("/api/playlists", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ name: t }),
            })
              .then((e) => e.json())
              .then((t) =>
                fetch(`/api/playlists/${t.id}/tracks/${e}`, { method: "POST" }),
              )
              .then((e) => {
                if (!e.ok)
                  throw new Error("Failed to add track to new playlist.");
                (showToast(`Track added to new playlist: ${t}!`),
                  closePlaylistModals(),
                  showSkeleton(),
                  f());
              })
              .catch((e) => showToast(e.message, "error"));
        }
        return;
      }
      g || p || closePlaylistModals();
    }),
    document.body.addEventListener("input", (e) => {
      const t = e.target.closest("[data-new-playlist-name]");
      if (t) {
        const e = t.closest(".playlist-modal");
        if (e) {
          const a = e.querySelector("[data-create-playlist]");
          a && (a.disabled = 0 === t.value.trim().length);
        }
      }
    }),
    document.body.addEventListener(
      "blur",
      (e) => {
        const t = e.target.closest("textarea[data-notes-input]");
        if (t) {
          const e = t.closest("tr[data-track-id]");
          if (!e) return;
          const a = e.querySelector("form[data-rating-form]"),
            r = e.querySelector("div[data-star-rating]");
          if (!a || !r) return;
          const n = parseFloat(r.dataset.rating) || 0;
          if (n > 0) {
            const e = new FormData();
            (e.set("rating", n),
              e.set("notes", t.value),
              fetch(a.action, { method: "POST", body: e }).then(() => {
                const e = a.querySelector("button[data-notes-toggle]");
                if (e) {
                  const a = t.value.trim().length > 0;
                  ((e.textContent = "Saved!"),
                    e.classList.toggle("border-green-text", a),
                    e.classList.toggle("text-green-text", a),
                    e.classList.toggle("border-gray-text", !a),
                    e.classList.toggle("text-gray-text", !a),
                    setTimeout(() => {
                      e.textContent = a ? "Edit Note" : "Add Note";
                    }, 2e3));
                }
              }));
          }
        }
      },
      !0,
    ),
    document.body.addEventListener("mousemove", (e) => {
      const t = e.target.closest("[data-star-rating]");
      t && k(t, e);
    }),
    document.body.addEventListener(
      "mouseleave",
      (e) => {
        const t = e.target.closest("[data-star-rating]");
        if (t) {
          const e = ((parseFloat(t.dataset.rating) || 0) / 10) * 100;
          t.style.setProperty("--rating-width", `${e}%`);
        }
      },
      !0,
    ),
    document.getElementById("theme-switcher")?.addEventListener("click", () => {
      const e = document.documentElement,
        t = "dark" === e.dataset.theme ? "light" : "dark";
      ((e.dataset.theme = t),
        localStorage.setItem("theme", t),
        updateThemeUI(),
        x());
    }),
    document
      .getElementById("player-embed-btn")
      .addEventListener("click", () => {
        if (!playerState.currentTrackId) return;
        const e = document.querySelector(
          `tr[data-track-id="${playerState.currentTrackId}"]`,
        );
        if (!e) return;
        const t = e.querySelector("button[data-embed-button]");
        if (!t) return;
        t.classList.contains("is-open")
          ? t.click()
          : (t.click(),
            e.scrollIntoView({ behavior: "smooth", block: "center" }));
      }),
    document
      .getElementById("player-repeat-btn")
      .addEventListener("click", (e) => {
        ((playerState.isRepeat = !playerState.isRepeat),
          e.currentTarget.classList.toggle("active", playerState.isRepeat));
      }),
    document
      .getElementById("player-shuffle-btn")
      .addEventListener("click", (e) => {
        ((playerState.isShuffle = !playerState.isShuffle),
          e.currentTarget.classList.toggle("active", playerState.isShuffle),
          playerState.isShuffle && generateShuffledPlaylist());
      }),
    document
      .getElementById("player-jump-to-btn")
      .addEventListener("click", () => {
        if (playerState.currentTrackId) {
          const e = document.querySelector("tr.is-playing");
          e && e.scrollIntoView({ behavior: "smooth", block: "center" });
        }
      }),
    t.addEventListener("click", togglePlayPause),
    a.addEventListener("click", g),
    r.addEventListener("click", function () {
      const e = playerState.isShuffle
          ? playerState.shuffledPlaylist
          : playerState.playlist,
        t = playerState.isEmbedded,
        a = playerState.currentTrackId,
        r = e.findIndex((e) => e.id === playerState.currentTrackId);
      if (-1 === r) return;
      const n = e[(r - 1 + e.length) % e.length];
      if (
        (t && cleanupPreviousEmbed(a),
        (playerState.currentTrackId = n.id),
        (playerState.isEmbedded = !1),
        (s.value = 0),
        (d.textContent = "0:00"),
        (i.textContent = "0:00"),
        (document.getElementById("player-thumbnail").src = n.imageUrl),
        (document.getElementById("player-title").textContent = n.title),
        (document.getElementById("player-producer").textContent = n.producer),
        b(),
        t)
      )
        setTimeout(() => {
          const e = document.querySelector(`tr[data-track-id="${n.id}"]`);
          if (e) {
            const t = e.querySelector("button[data-embed-button]");
            t && !t.classList.contains("is-open") && t.click();
          }
        }, 300);
      else {
        const e = getYouTubeVideoId(n.link);
        ytPlayer && e
          ? ytPlayer.loadVideoById(e)
          : e &&
            (ytPlayer = new YT.Player("youtube-player-container", {
              height: "180",
              width: "320",
              videoId: e,
              playerVars: { playsinline: 1, autoplay: 1 },
              events: {
                onReady: (e) => {
                  (e.target.setVolume(playerState.volume),
                    playerState.isMuted ? e.target.mute() : e.target.unMute());
                },
                onStateChange: C,
                onError: v,
              },
            }));
      }
    }),
    n.addEventListener("click", h),
    o.addEventListener("input", (e) => {
      const t = e.target.value;
      ((playerState.volume = t),
        (playerState.isMuted = 0 == t),
        localStorage.setItem("playerVolume", t));
      const a = getActivePlayer();
      (a && (a.setVolume(t), playerState.isMuted ? a.mute() : a.unMute()), b());
    }),
    l.addEventListener("click", () => {
      ((playerState.isMuted = !playerState.isMuted),
        localStorage.setItem("playerMuted", playerState.isMuted));
      const e = getActivePlayer();
      (e &&
        (playerState.isMuted
          ? e.mute()
          : (e.unMute(),
            0 == playerState.volume &&
              ((playerState.volume = 50), e.setVolume(playerState.volume)))),
        b());
    }),
    s.addEventListener("input", () => {
      stopProgressUpdater();
    }),
    s.addEventListener("change", () => {
      (!(function () {
        let e;
        if (
          ((e =
            playerState.isEmbedded &&
            playerState.embeddedPlayers[playerState.currentTrackId]
              ? playerState.embeddedPlayers[playerState.currentTrackId]
              : ytPlayer),
          e)
        ) {
          const t = e.getDuration();
          if (t > 0) {
            const a = (s.value / 100) * t;
            e.seekTo(a, !0);
          }
        }
      })(),
        w());
    }),
    c &&
      ((c.value = currentLimit),
      c.addEventListener("change", (e) => {
        ((currentLimit = e.target.value),
          (currentPage = 1),
          showSkeleton(),
          f());
      })),
    u &&
      u.addEventListener("click", (e) => {
        let t = !1;
        ("prev-page-btn" !== e.target.id ||
          e.target.disabled ||
          (currentPage--, (t = !0)),
          "next-page-btn" !== e.target.id ||
            e.target.disabled ||
            (currentPage++, (t = !0)));
        const a = e.target.closest("button[data-page]");
        if (a && !a.classList.contains("active")) {
          const e = parseInt(a.dataset.page, 10);
          Number.isNaN(e) || ((currentPage = e), (t = !0));
        }
        t && (showSkeleton(), f());
      }),
    y &&
      (y.addEventListener("input", (e) => {
        ((currentPage = 1),
          e.target.matches('input[type="text"], input[type="search"]')
            ? (toggleClearButton(e.target), showSkeleton(), S())
            : "limit_filter" !== e.target.id &&
              ((currentPage = 1), showSkeleton(), f()));
      }),
      y
        .querySelectorAll('input[type="text"], input[type="search"]')
        .forEach(toggleClearButton)),
    p &&
      p.addEventListener("click", (e) => {
        e.preventDefault();
        const t = document.getElementById("scrape-status");
        ((p.disabled = !0),
          (p.textContent = "Checking..."),
          fetch("/scrape", { method: "POST" })
            .then((e) => e.json())
            .then((e) => {
              t.textContent = e.message;
              const a = setInterval(() => {
                fetch("/api/scrape-status")
                  .then((e) => e.json())
                  .then((e) => {
                    if ("no_changes" === e.status)
                      (clearInterval(a),
                        (t.textContent = "Ranking is already up-to-date."),
                        (p.disabled = !1),
                        (p.textContent = "Update Tracks"),
                        setTimeout(() => {
                          t.textContent = "";
                        }, 4e3));
                    else if ("completed" === e.status)
                      (clearInterval(a),
                        (t.textContent = "Completed! Reloading..."),
                        window.location.reload());
                    else if ("error" === e.status)
                      (clearInterval(a),
                        (t.textContent =
                          "An error occurred. Check server logs."),
                        (p.disabled = !1),
                        (p.textContent = "Update Tracks"));
                    else if (e.status.startsWith("in_progress")) {
                      p.textContent = "Scraping...";
                      const a = e.status.split(":")[1];
                      t.textContent = a
                        ? `Scraping page ${a}...`
                        : "Changes found, updating...";
                    }
                  });
              }, 2e3);
            }));
      }),
    document.getElementById("scrape-button"))
  ) {
    const e = new URLSearchParams(window.location.search);
    ((currentPage = parseInt(e.get("page"), 10) || 1),
      (currentLimit =
        e.get("limit") || localStorage.getItem("defaultPageSize") || "all"),
      c && (c.value = currentLimit),
      showSkeleton(),
      f());
  }
  window.playerAPI = {
    loadAndPlayTrack: m,
    playerState: playerState,
    buildPlaylistFromEditor: (e) => {
      const t = Array.from(e)
        .map((e) => {
          const t = e.querySelector("img"),
            a = e.querySelector(".font-semibold"),
            r = e.querySelector(".text-sm");
          return {
            id: e.dataset.trackId,
            title: a ? a.textContent : "Unknown",
            producer: r ? r.textContent : "Unknown",
            imageUrl: t ? t.src : "",
            link: e.dataset.trackLink || "",
          };
        })
        .filter((e) => e.id && e.link);
      playerState.playlist = t;
    },
  };
});
