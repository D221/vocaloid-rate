document.addEventListener("DOMContentLoaded", () => {
  const e = (e, t = "h-full w-full") =>
      ({
        plus: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M352 128C352 110.3 337.7 96 320 96C302.3 96 288 110.3 288 128L288 288L128 288C110.3 288 96 302.3 96 320C96 337.7 110.3 352 128 352L288 352L288 512C288 529.7 302.3 544 320 544C337.7 544 352 529.7 352 512L352 352L512 352C529.7 352 544 337.7 544 320C544 302.3 529.7 288 512 288L352 288L352 128z"/></svg>`,
        play: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M187.2 100.9C174.8 94.1 159.8 94.4 147.6 101.6C135.4 108.8 128 121.9 128 136L128 504C128 518.1 135.5 531.2 147.6 538.4C159.7 545.6 174.8 545.9 187.2 539.1L523.2 355.1C536 348.1 544 334.6 544 320C544 305.4 536 291.9 523.2 284.9L187.2 100.9z"/></svg>`,
        trash: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M232.7 69.9L224 96L128 96C110.3 96 96 110.3 96 128C96 145.7 110.3 160 128 160L512 160C529.7 160 544 145.7 544 128C544 110.3 529.7 96 512 96L416 96L407.3 69.9C402.9 56.8 390.7 48 376.9 48L263.1 48C249.3 48 237.1 56.8 232.7 69.9zM512 208L128 208L149.1 531.1C150.7 556.4 171.7 576 197 576L443 576C468.3 576 489.3 556.4 490.9 531.1L512 208z"/></svg>`,
        check: `<svg class="${t}" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 640 640">\x3c!--!Font Awesome Free v7.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.--\x3e<path d="M530.8 134.1C545.1 144.5 548.3 164.5 537.9 178.8L281.9 530.8C276.4 538.4 267.9 543.1 258.5 543.9C249.1 544.7 240 541.2 233.4 534.6L105.4 406.6C92.9 394.1 92.9 373.8 105.4 361.3C117.9 348.8 138.2 348.8 150.7 361.3L252.2 462.8L486.2 141.1C496.6 126.8 516.6 123.6 530.9 134z"/></svg>`,
      })[e] || "",
    t = document.querySelector("[data-playlist-id]");
  if (!t) return;
  const o = t.dataset.playlistId,
    a = document.getElementById("all-tracks-list"),
    r = document.getElementById("playlist-tracks-list"),
    n = document.getElementById("track-search"),
    s = (e, t = "success") => {
      const o = document.createElement("div"),
        a = "error" === t ? "bg-red-text" : "bg-green-text";
      ((o.className = `fixed bottom-24 right-5 z-[2000] rounded-md px-4 py-3 font-semibold shadow-lg text-white ${a}`),
        (o.textContent = e),
        document.body.appendChild(o),
        setTimeout(() => {
          ((o.style.transition = "opacity 0.5s ease"),
            (o.style.opacity = "0"),
            setTimeout(() => o.remove(), 500));
        }, 2500));
    },
    c = (t) => {
      const o = t.dataset.trackId,
        a = t.dataset.trackLink,
        r = t.querySelector("img").src,
        n = t.querySelector(".font-semibold").textContent,
        s = t.querySelector(".text-sm").textContent,
        c = document.createElement("div");
      return (
        (c.className =
          "track-item flex cursor-grab items-center justify-between gap-3 rounded bg-card-bg p-2 shadow"),
        (c.dataset.trackId = o),
        (c.dataset.trackLink = a),
        (c.innerHTML = `\n        <div class="flex items-center gap-3 overflow-hidden">\n            <button data-play-button data-track-id="${o}" class="p-2 text-gray-text hover:text-cyan-text">\n                <span class="inline-block h-6 w-6">${e("play")}</span>\n            </button>\n            <a href="${a}" target="_blank" class="flex items-center gap-3">\n                <img src="${r}" alt="${n}" class="h-10 w-10 rounded object-cover">\n                <div>\n                    <div class="font-semibold truncate">${n}</div>\n                    <div class="text-sm text-gray-text truncate">${s}</div>\n                </div>\n            </a>\n        </div>\n        <button data-remove-track class="p-2 text-red-text hover:text-red-500">\n            <span class="inline-block h-6 w-6">${e("trash")}</span>\n        </button>\n    `),
        c
      );
    },
    d = ((e, t) => {
      let o;
      return function (...a) {
        (clearTimeout(o), (o = setTimeout(() => e.apply(this, a), t)));
      };
    })(async (e) => {
      if (e)
        try {
          if (
            !(
              await fetch(`/api/playlists/${o}/reorder`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(e),
              })
            ).ok
          )
            throw new Error("Server error on save.");
          s("Playlist order saved!");
        } catch {
          s("Failed to save order.", "error");
        }
    }, 500),
    l = async (e) => {
      try {
        await fetch(`/api/playlists/${o}/tracks/${e}`, { method: "POST" });
      } catch {
        s("Failed to add track.", "error");
      }
    },
    i = async (e) => {
      try {
        await fetch(`/api/playlists/${o}/tracks/${e}`, { method: "DELETE" });
      } catch {
        s("Failed to remove track.", "error");
      }
    };
  document.querySelectorAll("[data-edit-field]").forEach((e) => {
    e.addEventListener("click", (e) => {
      const t = e.currentTarget.parentElement,
        o = t.querySelector(".view-mode"),
        a = t.querySelector(".edit-mode");
      (o.classList.add("hidden"),
        a.classList.remove("hidden"),
        a.focus(),
        a.select());
    });
  });
  const m = async () => {
    const e = document.querySelector("h1 .edit-mode").value.trim(),
      t = document.querySelector("p .edit-mode"),
      a = t ? t.value.trim() : "";
    if (!e)
      return (
        s("Playlist name cannot be empty.", "error"),
        void (document.querySelector("h1 .edit-mode").value =
          document.querySelector("h1 .view-mode").textContent)
      );
    try {
      if (
        !(
          await fetch(`/api/playlists/${o}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ name: e, description: a }),
          })
        ).ok
      )
        throw new Error("Failed to save details.");
      ((document.querySelector("h1 .view-mode").textContent = e),
        document.querySelector("p .view-mode") &&
          (document.querySelector("p .view-mode").textContent =
            a || "No description."),
        s("Playlist details saved!"));
    } catch (e) {
      s(e.message, "error");
    } finally {
      (document
        .querySelectorAll(".view-mode")
        .forEach((e) => e.classList.remove("hidden")),
        document
          .querySelectorAll(".edit-mode")
          .forEach((e) => e.classList.add("hidden")));
    }
  };
  (document.querySelectorAll(".edit-mode").forEach((e) => {
    (e.addEventListener("blur", m),
      e.addEventListener("keydown", (t) => {
        "Enter" !== t.key || t.shiftKey
          ? "Escape" === t.key &&
            ((e.value =
              e.parentElement.querySelector(".view-mode").textContent),
            e.blur())
          : (t.preventDefault(), e.blur());
      }));
  }),
    new Sortable(a, {
      group: { name: "shared", pull: "clone", put: !1 },
      sort: !1,
      animation: 150,
    }),
    new Sortable(r, {
      group: "shared",
      animation: 150,
      onAdd: function (e) {
        const t = e.item.dataset.trackId;
        l(t);
        const o = c(e.item);
        (e.item.replaceWith(o), p());
        const a = Array.from(r.children).map((e) => e.dataset.trackId);
        d(a);
      },
      onEnd: function () {
        const e = Array.from(r.children).map((e) => e.dataset.trackId);
        d(e);
      },
    }),
    n.addEventListener("input", () => {
      const e = n.value.toLowerCase();
      a.querySelectorAll(".track-item").forEach((t) => {
        const o = t.textContent.toLowerCase();
        t.style.display = o.includes(e) ? "flex" : "none";
      });
    }),
    a.addEventListener("click", (e) => {
      const t = e.target.closest(".track-item");
      if (!t) return;
      const o = t.dataset.trackId;
      if (t && !t.classList.contains("cursor-not-allowed")) {
        const e = t.dataset.trackId;
        l(e);
        const o = c(t);
        r.appendChild(o);
      } else {
        const e = r.querySelector(`.track-item[data-track-id="${o}"]`);
        e && (i(o), e.remove(), s("Track removed from playlist."));
      }
      p();
      const a = Array.from(r.children).map((e) => e.dataset.trackId);
      d(a);
    }),
    r.addEventListener("click", (e) => {
      const t = e.target.closest("[data-remove-track]");
      if (t) {
        const e = t.closest(".track-item"),
          o = e.dataset.trackId;
        (i(o), e.remove());
        const a = Array.from(r.children).map((e) => e.dataset.trackId);
        (d(a), p(), s("Track removed."));
      }
    }));
  const u = document.querySelector(".grid.grid-cols-1");
  u &&
    u.addEventListener("click", (e) => {
      const t = e.target.closest("[data-play-button]");
      if (t) {
        (e.preventDefault(), e.stopPropagation());
        const o = t.dataset.trackId;
        if (window.playerAPI) {
          const e = document.querySelectorAll(".track-item");
          (window.playerAPI.buildPlaylistFromEditor(e),
            window.playerAPI.loadAndPlayTrack(o));
        } else
          alert(
            "Player API not found. Make sure main.js is loaded before this script.",
          );
      }
    });
  const p = () => {
    const t = new Set();
    (r.querySelectorAll("[data-track-id]").forEach((e) => {
      t.add(e.dataset.trackId);
    }),
      a.querySelectorAll(".track-item").forEach((o) => {
        const a = o.dataset.trackId,
          r = o.querySelector("[data-add-indicator]");
        t.has(a)
          ? (o.classList.add("opacity-50", "cursor-not-allowed"),
            r &&
              (r.innerHTML = `<span class="inline-block h-6 w-6 text-green-text">${e("check")}</span>`))
          : (o.classList.remove("opacity-50", "cursor-not-allowed"),
            r &&
              (r.innerHTML = `<span class="inline-block h-6 w-6">${e("plus")}</span>`));
      }));
  };
  p();
});
